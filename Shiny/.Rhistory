tweet <- read.csv(file="D:/Data Intensive Computing/tweetsLocations.csv", header=TRUE, sep = ",")
View(tweet)
result <- geocode(as.character(tweet$x))
library(ggmap)
result <- geocode(as.character(tweet$x))
register_google(key = 'AIzaSyCjJ0UxhS2ZB0v3ejzyP7-gNWW3QINEQBk')
result <- geocode(as.character(tweet$x))
nrow(result)
View(result)
latlong2state <- function(final_result) {
all_states <- map('state', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(all_states$names, ":"), function(x) x[1])
SpatialStates <- map2SpatialPolygons(all_states, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
SP_points <- SpatialPoints(final_result,
proj4string=CRS("+proj=longlat +datum=WGS84"))
index <- over(SP_points, SpatialStates)
state_Names <- sapply(SpatialStates@polygons, function(x) x@ID)
state_Names[index]
}
stateList <- latlong2state(testPoints)
library(ggplot2)
library(map)
library(ggmap)
library(sp)
library(maps)
library(maptools)
stateList <- latlong2state(testPoints)
install.packages("maptools")
library(sp)
library(maps)
library(maptools)
stateList <- latlong2state(testPoints)
stateList <- latlong2state(result)
result[complete.cases(result), ]
stateList <- latlong2state(result)
result <- result[complete.cases(result), ]
stateList <- latlong2state(result)
write.csv(stateList,"states.csv")
write.csv(stateList,"D:/Data Intensive Computing/states.csv")
tweetInfluenza <- read.csv(file="D:/Data Intensive Computing/tweetsLocationsInfluenza.csv", header=TRUE, sep = ",")
library(ggmap)
resultInfluenza <- geocode(as.character(tweetInfluenza$x))
register_google(key = 'AIzaSyCjJ0UxhS2ZB0v3ejzyP7-gNWW3QINEQBk')
resultInfluenza <- geocode(as.character(tweetInfluenza$x))
nrow(resultInfluenza)
latlong2state <- function(final_result) {
all_states <- map('state', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(all_states$names, ":"), function(x) x[1])
SpatialStates <- map2SpatialPolygons(all_states, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
SP_points <- SpatialPoints(final_result,
proj4string=CRS("+proj=longlat +datum=WGS84"))
index <- over(SP_points, SpatialStates)
state_Names <- sapply(SpatialStates@polygons, function(x) x@ID)
state_Names[index]
}
library(sp)
library(maps)
library(maptools)
stateList <- latlong2state(resultInfluenza)
result[complete.cases(resultInfluenza), ]
resultInfluenza[complete.cases(resultInfluenza), ]
stateListInfluenza <- latlong2state(resultInfluenza)
resultInfluenza <- resultInfluenza[complete.cases(resultInfluenza), ]
stateListInfluenza <- latlong2state(resultInfluenza)
write.csv(stateList,"D:/Data Intensive Computing/statesInfluenza.csv")
write.csv(stateListInfluenza,"D:/Data Intensive Computing/statesInfluenza.csv")
stateListInfluenza
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
header <- dashboardHeader(title = "Flu Data Analysis")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard - CDC vs FLU", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Dashboard - Flu Terms Comparison", tabName = "dashboard2", icon = icon("dashboard"))
)
)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
)
frow2 <- fluidRow(
box(
title = "CDC Map"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("cdcHeatMap", height = "300px")
)
,box(
title = "Map - Tweets(FLU)"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("fluHeatMap", height = "300px")
)
)
body <- dashboardBody(frow1, frow2)
uiFinal <- dashboardPage(title = 'Flu analysis', header, sidebar, body, skin='red')
library(ggplot2)
library(repr)
library(reshape2)
library(grid)
library(magrittr)
library(fiftystater)
library(mapproj)
X7_Flu_Heat_Map <- read.csv("D:/Data Intensive Computing/HeatMap.csv")
copySeries <- X7_Flu_Heat_Map$ACTIVITY.LEVEL
newSeries <- seq(1,54,1)
for (i in seq(1,54)) {
process <-as.character(copySeries[i]) %>% strsplit(" ") %>% extract2(1) %>% extract(2) %>% as.integer()
newSeries[i] <- process
}
X7_Flu_Heat_Map$ACTIVITY.LEVEL <- newSeries %>% factor(levels = c("10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0"))
X7_Flu_Heat_Map$ACTIVITY.LEVEL
X7_Flu_Heat_Map$STATENAME <- X7_Flu_Heat_Map$STATENAME %>% tolower()
library(ggplot2)
library(repr)
library(reshape2)
library(grid)
library(magrittr)
library(fiftystater)
library(mapproj)
tweetStateChartFinal <- read.csv("D:/Data Intensive Computing/tweetStateChartFinal.csv")
copySeries2 <- tweetStateChartFinal$ACTIVITY.LEVEL
newSeries2 <- seq(1,49,1)
for (i in seq(1,49)) {
process <-as.character(copySeries2[i]) %>% as.integer()
newSeries2[i] <- process
}
tweetStateChartFinal$ACTIVITY.LEVEL <- newSeries2 %>% factor(levels = c("10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0"))
tweetStateChartFinal$STATENAME <- tweetStateChartFinal$STATENAME %>% tolower()
freq <- read.csv("D:/Data Intensive Computing/Frequency.csv")
tweet <- read.csv(file="D:/Data Intensive Computing/tweetsLocationsFever.csv", header=TRUE, sep = ",")
register_google(key = 'AIzaSyCjJ0UxhS2ZB0v3ejzyP7-gNWW3QINEQBk')
library(ggmap)
register_google(key = 'AIzaSyCjJ0UxhS2ZB0v3ejzyP7-gNWW3QINEQBk')
View(tweet)
result <- geocode(as.character(tweet$x))
latlong2state <- function(final_result) {
all_states <- map('state', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(all_states$names, ":"), function(x) x[1])
SpatialStates <- map2SpatialPolygons(all_states, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
SP_points <- SpatialPoints(final_result,
proj4string=CRS("+proj=longlat +datum=WGS84"))
index <- over(SP_points, SpatialStates)
state_Names <- sapply(SpatialStates@polygons, function(x) x@ID)
state_Names[index]
}
result <- result[complete.cases(result), ]
stateList <- latlong2state(result)
library(maps)
library(maptools)
library(sp)
stateList <- latlong2state(result)
write.csv(stateList,"D:/Data Intensive Computing/statesFever.csv")
install.packages("shiny")
install.packages("shinydashboard")
library(shiny)
require(shinydashboard)
library(ggplot2)
library(dplyr)
header <- dashboardHeader(title = "Flu Data Analysis")
#Sidebar content of the dashboard
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard - CDC vs FLU", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Dashboard - Flu Terms", tabName = "dashboard2", icon = icon("dashboard"))
)
)
frow1 <- fluidRow(
valueBoxOutput("value1")
,valueBoxOutput("value2")
,valueBoxOutput("value3")
)
frow2 <- fluidRow(
box(
title = "CDC Map"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("cdcHeatMap", height = "300px")
)
,box(
title = "Map - Tweets(FLU)"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("fluHeatMap", height = "300px")
)
)
brow1 <- fluidRow(
valueBoxOutput("value11")
,valueBoxOutput("value21")
,valueBoxOutput("value31")
,valueBoxOutput("value41")
,valueBoxOutput("value51")
,valueBoxOutput("value61")
,valueBoxOutput("value71")
,valueBoxOutput("value81")
,valueBoxOutput("value91")
)
brow2 <- fluidRow(
box(
title = "CDC Map"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("cdcHeatMap1", height = "300px")
)
,box(
title = "Map - Tweets(FLU)"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("fluHeatMap1", height = "300px")
)
,box(
title = "Map - Tweets(Influenza)"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("influenzaHeatMap1", height = "300px")
)
,box(
title = "Map - Tweets(Fever)"
,status = "primary"
,solidHeader = TRUE
,collapsible = TRUE
,plotOutput("feverHeatMap1", height = "300px")
)
)
body <- dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
frow1,
frow2
),
tabItem(tabName = "dashboard2",
brow1,
brow2)
) # /tabItems
) # /dashboardBody
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
getwd()
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
getwd()
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
getwd()
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
getwd()
runApp('D:/Data Intensive Computing/Shiny')
runApp('D:/Data Intensive Computing/Shiny')
setwd("D:/Data Intensive Computing/Shiny")
runApp()
runApp()
runApp()
